<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>AIË®ò‰∫ã„É¨„Éì„É•„Éº - „Ç§„É≥„É©„Ç§„É≥„Ç≥„É°„É≥„Éà</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <style>
        /* GoogleDocs„É©„Ç§„ÇØ„Å™„Ç≥„É°„É≥„ÉàË°®Á§∫ */
        .comment-highlight {
            background-color: #fef3c7;
            border-bottom: 2px solid #f59e0b;
            cursor: pointer;
            position: relative;
        }
        
        .comment-highlight:hover {
            background-color: #fde68a;
        }
        
        .comment-highlight.active {
            background-color: #fed7aa;
            border-bottom-color: #ea580c;
        }
        
        .comment-panel {
            position: sticky;
            top: 20px;
            max-height: calc(100vh - 40px);
            overflow-y: auto;
        }
        
        .comment-item {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            background: white;
            margin-bottom: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
        }
        
        .comment-item:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transform: translateY(-1px);
        }
        
        .comment-item.highlighted {
            border-color: #3b82f6;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }
        
        /* Ê†°Ê≠£„Ç´„Éº„ÉâÂ∞ÇÁî®„Çπ„Çø„Ç§„É´ */
        .comment-item[data-comment-id*="proofread"] {
            background: linear-gradient(135deg, #fefefe 0%, #f8fafc 100%);
            border-left: 4px solid #3b82f6;
        }
        
        .comment-item[data-comment-id*="proofread"]:hover {
            border-left-color: #1d4ed8;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        }
        
        /* ÈáçË¶ÅÂ∫¶È´ò„ÅÆÊ†°Ê≠£„Ç´„Éº„Éâ */
        .comment-item[data-comment-id*="proofread"].border-red-300 {
            border-left-color: #ef4444;
            background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        }
        
        /* Ê†°Ê≠£ÊèêÊ°à„ÅÆ‰øÆÊ≠£ÂâçÂæåË°®Á§∫ */
        .proofreading-diff {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .proofreading-before, .proofreading-after {
            padding: 8px 12px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 13px;
            line-height: 1.4;
        }
        
        .proofreading-before {
            background: #fef2f2;
            border-left: 3px solid #ef4444;
            color: #991b1b;
        }
        
        .proofreading-after {
            background: #f0fdf4;
            border-left: 3px solid #22c55e;
            color: #166534;
        }
        
        /* ÈÅ©Áî®Ê∏à„Åø„Ç´„Éº„Éâ„ÅÆ„Çπ„Çø„Ç§„É´ */
        .comment-item.applied {
            opacity: 0.6;
            transform: scale(0.98);
            background: #f9fafb;
        }
        
        .article-content {
            line-height: 1.8;
            font-size: 16px;
        }
        
        .comment-thread {
            border-left: 3px solid #e5e7eb;
            padding-left: 12px;
            margin-left: 8px;
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            z-index: 50;
        }
        
        .custom-scroll::-webkit-scrollbar {
            width: 6px;
        }
        
        .custom-scroll::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        
        .custom-scroll::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- „Éò„ÉÉ„ÉÄ„Éº -->
    <header class="bg-white shadow-sm border-b sticky top-0 z-40">
        <div class="mx-[5%] px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-4">
                    <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold text-lg">
                        üìù
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">AIË®ò‰∫ã„É¨„Éì„É•„Éº</h1>
                        <p class="text-sm text-gray-500">„Ç§„É≥„É©„Ç§„É≥„Ç≥„É°„É≥„ÉàÂΩ¢Âºè„Åß„É™„Ç¢„É´„Çø„Ç§„É†ÊîπÂñÑÊèêÊ°à</p>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button onclick="showNewArticleModal()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm">
                        Êñ∞„Åó„ÅÑË®ò‰∫ã
                    </button>
                    <button onclick="exportComments()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm">
                        üìÑ „Ç®„ÇØ„Çπ„Éù„Éº„Éà
                    </button>
                    <button onclick="clearAllLocalStorage()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 text-sm">
                        üóëÔ∏è „Éá„Éº„Çø„ÇØ„É™„Ç¢
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="mx-[5%] px-4 sm:px-6 lg:px-8 py-6">
        <!-- „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ -->
        <div id="reviewContainer" class="grid grid-cols-1 lg:grid-cols-3 gap-8 hidden">
            <!-- Â∑¶ÂÅ¥ÔºöË®ò‰∫ã„Ç≥„É≥„ÉÜ„É≥„ÉÑ -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-lg">
                    <div class="border-b border-gray-200">
                        <!-- „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫ -->
                        <div class="flex items-center justify-between px-6 py-3 bg-gray-50">
                            <h2 class="text-xl font-semibold text-gray-800">Ë®ò‰∫ãÁ∑®ÈõÜ</h2>
                            <div class="flex space-x-2">
                                <span class="px-3 py-1 bg-green-100 text-green-700 text-sm rounded-full" id="analysisStatus">
                                    ÂàÜÊûêÂÆå‰∫Ü
                                </span>
                                <span class="px-3 py-1 bg-blue-100 text-blue-700 text-sm rounded-full" id="commentCount">
                                    „Ç≥„É°„É≥„Éà: 0
                                </span>
                            </div>
                        </div>
                        
                        <!-- „Çø„ÉñÂΩ¢Âºè„ÅÆ„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà -->
                        <div class="flex px-6">
                            <button 
                                onclick="switchToPreviewMode()" 
                                id="previewTab" 
                                class="px-4 py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 bg-white transition-colors"
                            >
                                <span class="flex items-center">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                    „Éó„É¨„Éì„É•„Éº
                                </span>
                            </button>
                            <button 
                                onclick="switchToEditMode()" 
                                id="editTab" 
                                class="px-4 py-3 text-sm font-medium text-gray-500 border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 transition-colors"
                            >
                                <span class="flex items-center">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                    </svg>
                                    Á∑®ÈõÜ
                                </span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- „Éó„É¨„Éì„É•„Éº„É¢„Éº„Éâ -->
                    <div class="p-8 article-content prose max-w-none" id="articleContent">
                        <!-- Ë®ò‰∫ãÂÜÖÂÆπ„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                    </div>
                    
                    <!-- Á∑®ÈõÜ„É¢„Éº„Éâ -->
                    <div class="p-6 hidden" id="editMode">
                        <div class="mb-4">
                            <div class="flex justify-between items-center mb-2">
                                <label class="text-sm font-medium text-gray-700">Ë®ò‰∫ãÂÜÖÂÆπÔºàMarkdownÔºâ</label>
                                <div class="text-xs text-gray-500">
                                    <span id="editCharCount">0 ÊñáÂ≠ó</span>
                                </div>
                            </div>
                            <textarea 
                                id="editTextarea" 
                                rows="20"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-y font-mono text-sm"
                                placeholder="MarkdownÂΩ¢Âºè„ÅßË®ò‰∫ã„ÇíÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."></textarea>
                        </div>
                        
                        <div class="flex justify-between">
                            <button onclick="previewChanges()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                                üëÄ „Éó„É¨„Éì„É•„Éº
                            </button>
                            <div class="space-x-2">
                                <button onclick="saveChanges()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                    üíæ ‰øùÂ≠ò
                                </button>
                                <button onclick="reAnalyze()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                                    üîÑ ÂÜçÂàÜÊûê
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Âè≥ÂÅ¥Ôºö„Ç≥„É°„É≥„Éà„ÉªÊîπÂñÑÊèêÊ°à„Éë„Éç„É´ -->
            <div class="lg:col-span-1">
                <div class="comment-panel">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                            <span class="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center text-yellow-600 mr-2">üí°</span>
                            ÊîπÂñÑÊèêÊ°à
                        </h3>
                        
                        <div id="commentsContainer" class="space-y-4 custom-scroll">
                            <!-- „Ç≥„É°„É≥„Éà„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                        </div>
                        
                        <div id="noCommentsMessage" class="text-center py-8 text-gray-500">
                            Ë®ò‰∫ã„ÇíÂàÜÊûê‰∏≠„Åß„Åô...
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ÂÖ®‰ΩìÂàÜÊûêÁµêÊûú„Çª„ÇØ„Ç∑„Éß„É≥ -->
        <div id="analysisResultsSection" class="mt-8 hidden">
            <div class="bg-white rounded-lg shadow-lg p-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                    <span class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 mr-3">üìä</span>
                    ÂÖ®‰ΩìÂàÜÊûêÁµêÊûú
                </h2>
                
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Âº∑„ÅøÂàÜÊûêÁµêÊûú -->
                    <div class="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg p-6">
                        <h3 class="text-xl font-semibold text-blue-800 mb-4 flex items-center">
                            <span class="w-6 h-6 bg-blue-200 rounded-full flex items-center justify-center text-blue-700 mr-2">üí™</span>
                            Âº∑„ÅøÂàÜÊûê
                        </h3>
                        <div id="strengthAnalysisResult">
                            <!-- Âº∑„ÅøÂàÜÊûêÁµêÊûú„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                        </div>
                    </div>

                    <!-- 6W2HÂàÜÊûêÁµêÊûú -->
                    <div class="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-6">
                        <h3 class="text-xl font-semibold text-green-800 mb-4 flex items-center">
                            <span class="w-6 h-6 bg-green-200 rounded-full flex items-center justify-center text-green-700 mr-2">‚úÖ</span>
                            6W2HÂàÜÊûê
                        </h3>
                        <div id="sixTwoAnalysisResult">
                            <!-- 6W2HÂàÜÊûêÁµêÊûú„Åå„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Çã -->
                        </div>
                    </div>
                </div>

                <!-- „Å™„Åú„Å™„ÅúÂàÜÊûê„Å∏„ÅÆË™òÂ∞é -->
                <div class="mt-8 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-6 text-center">
                    <h3 class="text-xl font-semibold text-purple-800 mb-3 flex items-center justify-center">
                        <span class="w-6 h-6 bg-purple-200 rounded-full flex items-center justify-center text-purple-700 mr-2">ü§î</span>
                        „Å™„Åú„Å™„ÅúÂàÜÊûê
                    </h3>
                    <p class="text-gray-600 mb-4">Ë®ò‰∫ã„ÅÆ„Çà„ÇäÊ∑±„ÅÑÊ¥ûÂØü„ÇíÂæó„Çã„Åü„ÇÅ„Å´„ÄÅ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂàÜÊûê„ÇíË°å„ÅÑ„Åæ„Åó„Çá„ÅÜ„ÄÇ</p>
                    <button onclick="startWhyAnalysis()" class="px-6 py-3 bg-purple-600 text-white rounded-lg font-semibold hover:bg-purple-700 transition-colors">
                        üöÄ „Å™„Åú„Å™„ÅúÂàÜÊûê„ÇíÈñãÂßã
                    </button>
                </div>
            </div>
        </div>

        <!-- ÂàùÊúüÂÖ•ÂäõÁîªÈù¢ -->
        <div id="inputContainer" class="max-w-4xl mx-auto">
            <div class="bg-white rounded-lg shadow-lg p-8">
                <div class="text-center mb-8">
                    <h2 class="text-3xl font-bold text-gray-900 mb-4">Ë®ò‰∫ã„É¨„Éì„É•„Éº„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ</h2>
                    <p class="text-gray-600">Ë®ò‰∫ã„ÇíÂÖ•Âäõ„Åô„Çã„Å®„ÄÅAI „ÅåËá™Âãï„ÅßÊîπÂñÑÊèêÊ°à„Çí„Ç§„É≥„É©„Ç§„É≥„Ç≥„É°„É≥„ÉàÂΩ¢Âºè„ÅßË°®Á§∫„Åó„Åæ„Åô</p>
                </div>

                <form id="articleForm" onsubmit="analyzeArticle(event)">
                    <div class="mb-6">
                        <label for="articleInput" class="block text-sm font-medium text-gray-700 mb-2">
                            Ë®ò‰∫ãÂÜÖÂÆπÔºàMarkdownÂØæÂøúÔºâ
                        </label>
                        <textarea 
                            id="articleInput" 
                            name="content"
                            rows="15" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-y"
                            placeholder="# „Çø„Ç§„Éà„É´

![ÁîªÂÉè](https://example.com/image.jpg)

„É™„Éº„ÉâÊñá

## „Çª„ÇØ„Ç∑„Éß„É≥Âêç

„Çª„ÇØ„Ç∑„Éß„É≥ÂÜÖÂÆπ...
"
                            required></textarea>
                        <div class="text-right text-xs text-gray-500 mt-1">
                            <span id="charCount">0 ÊñáÂ≠ó</span>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label for="targetPersona" class="block text-sm font-medium text-gray-700 mb-2">
                                „Çø„Éº„Ç≤„ÉÉ„ÉàË™≠ËÄÖÔºà‰ªªÊÑèÔºâ
                            </label>
                            <input 
                                type="text" 
                                id="targetPersona" 
                                name="persona"
                                placeholder="‰æã: 26„Éª27ÂçíÂ∞±Ê¥ªÁîü„ÄÅITÊ•≠ÁïåÂøóÊúõ(„Çà„ÇäË©≥Á¥∞„Å´)"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>

                        <div>
                            <label for="releaseType" class="block text-sm font-medium text-gray-700 mb-2">
                                „É™„É™„Éº„Çπ„Çø„Ç§„ÉóÔºà‰ªªÊÑèÔºâ
                            </label>
                            <select 
                                id="releaseType" 
                                name="release_type"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                                <option value="„Ç§„Éô„É≥„Éà">„Ç§„Éô„É≥„Éà</option>
                                <option value="Êñ∞ÂïÜÂìÅ">Êñ∞ÂïÜÂìÅ</option>
                                <option value="„Çµ„Éº„Éì„Çπ">„Çµ„Éº„Éì„Çπ</option>
                                <option value="‰ºÅÊ•≠">‰ºÅÊ•≠</option>
                            </select>
                        </div>
                    </div>

                    <div class="text-center">
                        <button 
                            type="submit"
                            id="analyzeButton" 
                            class="px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        >
                            üöÄ AI „É¨„Éì„É•„Éº„ÇíÈñãÂßã
                        </button>
                        <p class="text-sm text-gray-500 mt-2">Âº∑„ÅøÂàÜÊûê„Éª„Å™„Åú„Å™„ÅúÂàÜÊûê„Éª6W2HÂàÜÊûê„ÇíÂÆüË°å„Åó„Åæ„Åô</p>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- „É≠„Éº„Éá„Ç£„É≥„Ç∞„Ç™„Éº„Éê„Éº„É¨„Ç§ -->
    <div id="loadingOverlay" class="loading-overlay hidden">
        <div class="bg-white rounded-lg p-6 max-w-sm mx-auto text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
            <h3 class="text-base font-semibold text-gray-800 mb-1">Ë®ò‰∫ã„ÇíÂàÜÊûê‰∏≠...</h3>
            <p class="text-gray-600 text-xs" id="loadingMessage">AI „ÅåË®ò‰∫ã„ÇíË©≥Á¥∞ÂàÜÊûê„Åó„Å¶„ÅÑ„Åæ„Åô</p>
            <div class="mt-3 bg-gray-200 rounded-full h-1.5">
                <div class="bg-gradient-to-r from-blue-600 to-purple-600 h-1.5 rounded-full transition-all duration-500" id="loadingProgress" style="width: 0%"></div>
            </div>
        </div>
    </div>

    <!-- Êñ∞Ë®ò‰∫ãÂÖ•Âäõ„É¢„Éº„ÉÄ„É´ -->
    <div id="newArticleModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-gray-800">Êñ∞„Åó„ÅÑË®ò‰∫ã„ÇíÂÖ•Âäõ</h3>
                <button onclick="hideNewArticleModal()" class="text-gray-400 hover:text-gray-600 text-2xl">√ó</button>
            </div>
            <form id="newArticleForm" onsubmit="analyzeNewArticle(event)">
                <div class="mb-4">
                    <textarea 
                        id="newArticleInput" 
                        rows="12" 
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 resize-y"
                        placeholder="Êñ∞„Åó„ÅÑË®ò‰∫ãÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                        required></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="hideNewArticleModal()" class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50">
                        „Ç≠„É£„É≥„Çª„É´
                    </button>
                    <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        ÂàÜÊûêÈñãÂßã
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentComments = [];
        let analysisResults = {};
        let isEditMode = false;
        let originalContent = '';
        let currentMarkdown = '';

        // ÂàÜÊûêÁµêÊûú„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò„Åô„ÇãÂÖ±ÈÄöÈñ¢Êï∞
        function saveAnalysisResults() {
            try {
                localStorage.setItem('commentReviewAnalysisResults', JSON.stringify(analysisResults));
                localStorage.setItem('commentReviewComments', JSON.stringify(currentComments));
                localStorage.setItem('commentReviewMarkdown', currentMarkdown);
                console.log('Analysis results saved to localStorage:', {
                    analysisResults,
                    commentsCount: currentComments.length,
                    markdownLength: currentMarkdown.length
                });
            } catch (error) {
                console.error('Error saving analysis results:', error);
            }
        }

        // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Éà
        const articleInput = document.getElementById('articleInput');
        const charCount = document.getElementById('charCount');
        
        articleInput.addEventListener('input', function() {
            charCount.textContent = this.value.length.toLocaleString() + ' ÊñáÂ≠ó';
        });

        // Ë®ò‰∫ãÂàÜÊûê„ÅÆÂÆüË°å
        async function analyzeArticle(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const content = formData.get('content').trim();
            const persona = formData.get('persona').trim();
            const releaseType = formData.get('release_type').trim();
            
            if (!content) {
                alert('Ë®ò‰∫ãÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                return;
            }

            // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
            showLoading();
            
            try {
                // 4„Å§„ÅÆAIÂàÜÊûê„Çí‰∏¶Ë°åÂÆüË°å
                updateLoadingProgress(20, 'AIÂàÜÊûê„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...');
                
                const [strengthResult, whyResult, sixTwoResult, proofreadResult] = await Promise.all([
                    executeStrengthAnalysis(content, persona, releaseType),
                    executeWhyAnalysis(content),
                    executeSixTwoReview(content),
                    executeProofreadAnalysis(content)
                ]);
                
                updateLoadingProgress(90, 'ÂàÜÊûêÁµêÊûú„ÇíÂá¶ÁêÜ‰∏≠...');
                
                analysisResults = {
                    strength: strengthResult,
                    why: whyResult,
                    sixTwo: sixTwoResult,
                    proofread: proofreadResult,
                    content: content
                };
                
                // ÁµêÊûú„ÇíË°®Á§∫
                displayArticleWithComments(content);
                generateComments();
                
                // ÂàÜÊûêÁµêÊûú„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
                saveAnalysisResults();
                
                updateLoadingProgress(100, 'ÂÆå‰∫ÜÔºÅ');
                
                setTimeout(() => {
                    hideLoading();
                    showReviewContainer();
                }, 500);
                
            } catch (error) {
                console.error('Analysis failed:', error);
                hideLoading();
                alert('ÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
            }
        }

        // Âº∑„ÅøÂàÜÊûêÂÆüË°å
        async function executeStrengthAnalysis(content, persona, releaseType) {
            updateLoadingProgress(30, 'Âº∑„ÅøÂàÜÊûêÂÆüË°å‰∏≠...');
            
            const response = await fetch('/api/strength-analysis/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ content, persona, release_type: releaseType })
            });

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.message || 'Âº∑„ÅøÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
            
            return result.data;
        }

        // „Å™„Åú„Å™„ÅúÂàÜÊûêÂÆüË°å
        async function executeWhyAnalysis(content) {
            updateLoadingProgress(50, '„Å™„Åú„Å™„ÅúÂàÜÊûêÂÆüË°å‰∏≠...');
            
            const startResponse = await fetch('/api/why-analysis/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ content })
            });

            const startResult = await startResponse.json();
            if (!startResult.success) {
                throw new Error(startResult.message || '„Å™„Åú„Å™„ÅúÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }

            // Ëá™ÂãïÁöÑ„Å´Ê¥ûÂØüÁîüÊàê
            const insightResponse = await fetch('/api/why-analysis/insight', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({
                    content: content,
                    chat_history: [{
                        type: 'bot_question',
                        content: startResult.data.bot_response || '„Å™„Åú„Å™„ÅúÂàÜÊûê„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü',
                        timestamp: new Date().toISOString()
                    }],
                    session_id: startResult.session_id
                })
            });

            const insightResult = await insightResponse.json();
            if (!insightResult.success) {
                throw new Error(insightResult.message || 'Ê¥ûÂØüÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }

            return insightResult.data;
        }

        // 6W2HÂàÜÊûêÂÆüË°å
        async function executeSixTwoReview(content) {
            updateLoadingProgress(70, '6W2HÂàÜÊûêÂÆüË°å‰∏≠...');
            
            const response = await fetch('/api/sixtwo-review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ content })
            });

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.message || '6W2HÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }

            return result.data;
        }

        // Ê†°Ê≠£ÂàÜÊûêÂÆüË°å
        async function executeProofreadAnalysis(content) {
            updateLoadingProgress(80, 'Ê†°Ê≠£ÂàÜÊûêÂÆüË°å‰∏≠...');
            
            console.log('Executing proofreading analysis for content:', {
                contentLength: content.length,
                contentPreview: content.substring(0, 200) + '...',
                fullContent: content
            });
            
            try {
                const requestBody = { text: content };
                console.log('Sending proofreading request:', requestBody);
                
                const response = await fetch('/api/proofread', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify(requestBody)
                });
                
                console.log('Proofreading API response status:', response.status);
                const result = await response.json();
                console.log('Proofreading API result:', result);
                
                if (!response.ok || !result.success) {
                    console.warn('Proofreading API failed, using fallback:', result);
                    return getMockProofreadResult(content);
                }
                
                // ÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÅØÊßãÈÄ†Âåñ„Åï„Çå„Åü„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„Åô
                return {
                    original: result.original,
                    proofread: result.corrected_text || result.proofread,
                    corrected_text: result.corrected_text || result.proofread,
                    suggestions: result.suggestions || [],
                    overall_assessment: result.overall_assessment || 'ÊñáÁ´†„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Åü„ÄÇ',
                    has_changes: result.has_changes || false
                };
            } catch (error) {
                console.warn('Proofreading API error, using fallback:', error);
                return getMockProofreadResult(content);
            }
        }

        // Ê†°Ê≠£„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„ÇøÔºàAPI„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥ÂêàÔºâ
        function getMockProofreadResult(content) {
            console.log('Generating mock proofreading suggestions for content length:', content.length);
            
            const suggestions = [];
            
            // ÁâπÂÆö„ÅÆÊñáÂ≠óÂàó„Å´Âü∫„Å•„ÅÑ„Å¶‰øÆÊ≠£ÊèêÊ°à„ÇíÁîüÊàê
            if (content.includes('„Éè„ÉÉ„Ç´„ÇΩ„É≥Âèó‰ªòÈñãÂßã')) {
                suggestions.push({
                    original: "„Éè„ÉÉ„Ç´„ÇΩ„É≥Âèó‰ªòÈñãÂßã",
                    corrected: "„Éè„ÉÉ„Ç´„ÇΩ„É≥Âèó‰ªò„ÇíÈñãÂßã",
                    reason: "„Çà„ÇäËá™ÁÑ∂„Å™Ë°®Áèæ„Å´„Åô„Çã„Åü„ÇÅ„ÄÅÂä©Ë©û„Äå„Çí„Äç„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇ",
                    type: "Ë°®ÁèæÊîπÂñÑ",
                    severity: "medium",
                    position: "„Çø„Ç§„Éà„É´ÈÉ®ÂàÜ"
                });
            }
            
            if (content.includes('Áâπ„Å´ÂÑ™ÁßÄ„Å™Êñπ„Å´„ÅØÂπ¥Âèé500‰∏áÂÜÜ‰ª•‰∏ä„ÅÆ‰∏≠ÈÄîÊé°Áî®Âü∫Ê∫ñ„Åß„ÅÆÂÜÖÂÆö„Çí„ÅäÂá∫„Åó„Åó„Åæ„Åô„ÄÇ')) {
                suggestions.push({
                    original: "Áâπ„Å´ÂÑ™ÁßÄ„Å™Êñπ„Å´„ÅØÂπ¥Âèé500‰∏áÂÜÜ‰ª•‰∏ä„ÅÆ‰∏≠ÈÄîÊé°Áî®Âü∫Ê∫ñ„Åß„ÅÆÂÜÖÂÆö„Çí„ÅäÂá∫„Åó„Åó„Åæ„Åô„ÄÇ",
                    corrected: "Áâπ„Å´ÂÑ™ÁßÄ„Å™Êñπ„Å´„ÅØ„ÄÅÂπ¥Âèé500‰∏áÂÜÜ‰ª•‰∏ä„ÅÆ‰∏≠ÈÄîÊé°Áî®Âü∫Ê∫ñ„Åß„ÅÆÂÜÖÂÆö„Çí„ÅäÂá∫„Åó„Åó„Åæ„Åô„ÄÇ",
                    reason: "Ë™≠ÁÇπ„ÇíËøΩÂä†„Åó„Å¶„ÄÅË™≠„Åø„ÇÑ„Åô„Åï„ÇíÂêë‰∏ä„Åï„Åõ„Åæ„Åó„Åü„ÄÇ",
                    type: "Âè•Ë™≠ÁÇπ",
                    severity: "low",
                    position: "Êú¨Êñá2ÊÆµËêΩÁõÆ"
                });
            }
            
            if (content.includes('Á≠â')) {
                suggestions.push({
                    original: "PR TIMES„ÄçÁ≠â„Çí",
                    corrected: "PR TIMES„Äç„Å™„Å©„Çí",
                    reason: "„ÄåÁ≠â„Äç„Çà„Çä„ÇÇ„Äå„Å™„Å©„Äç„ÅÆÊñπ„ÅåË™≠„Åø„ÇÑ„Åô„Åè„ÄÅ‰∏ÄËà¨ÁöÑ„Åß„Åô„ÄÇ",
                    type: "Ë°®Ë®òÁµ±‰∏Ä",
                    severity: "low",
                    position: "Êú¨Êñá‰∏≠"
                });
            }
            
            if (content.includes('„É™„Éã„É•„Éº„Ç¢„Åó„Åæ„Åô')) {
                suggestions.push({
                    original: "„É°„Éá„Ç£„Ç¢„É™„Çπ„ÉàÊ©üËÉΩ„Çí„É™„Éã„É•„Éº„Ç¢„Åó„Åæ„Åô",
                    corrected: "„É°„Éá„Ç£„Ç¢„É™„Çπ„ÉàÊ©üËÉΩ„Çí„É™„Éã„É•„Éº„Ç¢„É´„Åó„Åæ„Åô",
                    reason: "„Äå„É™„Éã„É•„Éº„Ç¢„É´„Äç„ÅÆÊ≠£„Åó„ÅÑË°®Ë®ò„Å´‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇ",
                    type: "Ë™§Â≠óËÑ±Â≠ó",
                    severity: "high",
                    position: "„Çø„Ç§„Éà„É´ÈÉ®ÂàÜ"
                });
            }
            
            // ‰øÆÊ≠£Âæå„ÅÆÊñáÁ´†„ÇíÁîüÊàê
            let correctedText = content;
            suggestions.forEach(suggestion => {
                correctedText = correctedText.replace(suggestion.original, suggestion.corrected);
            });
            
            return {
                original: content,
                proofread: correctedText,
                corrected_text: correctedText,
                suggestions: suggestions,
                overall_assessment: suggestions.length > 0 
                    ? `${suggestions.length}ÁÆáÊâÄ„ÅÆÊîπÂñÑÁÇπ„ÇíË¶ã„Å§„Åë„Åæ„Åó„Åü„ÄÇÊñáÁ´†„ÅÆÂìÅË≥™Âêë‰∏ä„Å´„ÅîÊ¥ªÁî®„Åè„Å†„Åï„ÅÑ„ÄÇ`
                    : 'ÊñáÁ´†„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Åü„ÄÇÁâπ„Å´‰øÆÊ≠£„ÅåÂøÖË¶Å„Å™ÁÆáÊâÄ„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ',
                has_changes: suggestions.length > 0
            };
        }

        // Ë®ò‰∫ãÂÜÖÂÆπ„Çí„Éè„Ç§„É©„Ç§„Éà‰ªò„Åç„ÅßË°®Á§∫
        function displayArticleWithComments(content) {
            originalContent = content;
            currentMarkdown = content;
            const articleContent = document.getElementById('articleContent');
            const editTextarea = document.getElementById('editTextarea');
            
            // Á∑®ÈõÜÁî®„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Å´„ÇÇÂÜÖÂÆπ„ÇíË®≠ÂÆö
            editTextarea.value = content;
            updateEditCharCount();
            
            // Markdown „Çí HTML „Å´Â§âÊèõÔºàÁ∞°ÊòìÁâàÔºâ
            let htmlContent = content
                .replace(/^# (.*$)/gim, '<h1 class="text-3xl font-bold text-gray-900 mb-6">$1</h1>')
                .replace(/^## (.*$)/gim, '<h2 class="text-2xl font-semibold text-gray-800 mb-4 mt-8">$1</h2>')
                .replace(/^### (.*$)/gim, '<h3 class="text-xl font-medium text-gray-800 mb-3 mt-6">$1</h3>')
                .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold">$1</strong>')
                .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
                .replace(/!\[([^\]]*)\]\(([^)]+)\)/g, '<img src="$2" alt="$1" class="w-full h-auto rounded-lg my-6 shadow-md">')
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-600 hover:text-blue-800 underline">$1</a>')
                .replace(/^- (.*$)/gim, '<li class="ml-4">$1</li>')
                .replace(/\n\n/g, '</p><p class="mb-4">')
                .replace(/\n/g, '<br>');

            // ÊÆµËêΩ„ÅßÂõ≤„ÇÄ
            htmlContent = '<p class="mb-4">' + htmlContent + '</p>';
            
            // „É™„Çπ„Éà„Çí ul „ÅßÂõ≤„ÇÄ
            htmlContent = htmlContent.replace(/(<li class="ml-4">.*?<\/li>)/gs, '<ul class="list-disc list-inside mb-4 space-y-1">$1</ul>');
            
            articleContent.innerHTML = htmlContent;
        }

        // „Ç≥„É°„É≥„Éà„ÅÆÁîüÊàê„Å®Ë°®Á§∫
        function generateComments() {
            currentComments = [];
            const { strength, why, sixTwo, proofread } = analysisResults;

            // „Éá„Éê„ÉÉ„Ç∞ÔºöÊ†°Ê≠£ÁµêÊûú„ÇíÁ¢∫Ë™ç
            console.log('Proofread data in generateComments:', proofread);
            
            // Ê†°Ê≠£ÁµêÊûú„Çí„Ç≥„É°„É≥„Éà„Å®„Åó„Å¶ËøΩÂä†
            if (proofread && proofread.suggestions && proofread.suggestions.length > 0) {
                console.log('Processing proofreading suggestions:', proofread.suggestions);
                
                proofread.suggestions.forEach((suggestion, index) => {
                    // severity„Å´Âü∫„Å•„ÅÑ„Å¶ÂÑ™ÂÖàÂ∫¶„ÇíÊ±∫ÂÆö
                    const priority = suggestion.severity || 'medium';
                    
                    // severity„Å´Âü∫„Å•„ÅÑ„Å¶„Ç¢„Ç§„Ç≥„É≥„Å®Ëâ≤„ÇíÊ±∫ÂÆö
                    const severityConfig = {
                        'high': { icon: 'üî•', color: 'red', label: 'ÈáçË¶Å' },
                        'medium': { icon: '‚ö†Ô∏è', color: 'yellow', label: 'Êé®Â•®' },
                        'low': { icon: 'üí°', color: 'blue', label: 'ÊèêÊ°à' }
                    };
                    
                    const config = severityConfig[priority] || severityConfig.medium;
                    
                    currentComments.push({
                        id: `proofread-${index}`,
                        title: `${suggestion.type || 'Ê†°Ê≠£'}„ÅÆÊîπÂñÑ ${config.icon}`,
                        content: `„Äå${suggestion.original}„Äç‚Üí„Äå${suggestion.corrected}„Äç`,
                        detail: suggestion.reason,
                        category: 'Ê†°Ê≠£',
                        severity: priority,
                        priority: priority,
                        position: suggestion.position || `‰øÆÊ≠£ÁÆáÊâÄ`,
                        tips: `${config.label}Â∫¶Ôºö${suggestion.type}„ÅÆ‰øÆÊ≠£ÊèêÊ°à`,
                        type: 'specific',
                        suggestions: {
                            original: suggestion.original,
                            corrected: suggestion.corrected,
                            reason: suggestion.reason,
                            type: suggestion.type,
                            severity: suggestion.severity
                        }
                    });
                });
                
                console.log('Added proofreading comments:', proofread.suggestions.length);
                
                // ÂÖ®‰ΩìË©ï‰æ°„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Çµ„Éû„É™„Éº„Ç´„Éº„Éâ„Å®„Åó„Å¶ËøΩÂä†
                if (proofread.overall_assessment && proofread.overall_assessment !== 'ÊñáÁ´†„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Åü„ÄÇ') {
                    currentComments.push({
                        id: 'proofread-summary',
                        title: 'Ê†°Ê≠£Á∑èË©ï üìù',
                        content: proofread.overall_assessment,
                        detail: `${proofread.suggestions.length}‰ª∂„ÅÆ‰øÆÊ≠£ÊèêÊ°à„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ`,
                        category: 'Ê†°Ê≠£„Çµ„Éû„É™„Éº',
                        severity: 'medium',
                        priority: 'medium',
                        position: 'ÂÖ®‰Ωì',
                        tips: 'AI„Å´„Çà„ÇãÊñáÁ´†ÂÖ®‰Ωì„ÅÆË©ï‰æ°„Åß„Åô„ÄÇ',
                        type: 'summary'
                    });
                }
            } else {
                console.log('No proofreading suggestions available');
            }

            // Âè≥ÂÅ¥„Ç≥„É°„É≥„ÉàÔºöÁâπÂÆöÈÉ®ÂàÜ„Å∏„ÅÆÊåáÊëò„ÅÆ„ÅøÔºàË®ò‰∫ãÊîπÂñÑ„Ç´„ÉÜ„Ç¥„É™„ÉºÔºâ
            if (why.article_applications) {
                why.article_applications.forEach((app, index) => {
                    if (app.after_example || app.suggestion) {
                        currentComments.push({
                            id: `application_${index}`,
                            type: 'application',
                            title: `${app.section}„ÅÆÊîπÂñÑ`,
                            content: app.after_example || app.suggestion,
                            detail: app.reason,
                            tips: app.tips,
                            severity: 'high',
                            category: 'Ë®ò‰∫ãÊîπÂñÑ',
                            position: index * 140 + 120
                        });
                    }
                });
            }

            console.log('Total comments generated:', currentComments.length);
            console.log('Comments breakdown:', currentComments.map(c => ({ id: c.id, category: c.category, title: c.title })));
            
            displayComments();
            addHighlights();
            updateCommentCount();
            
            // ÂÖ®‰ΩìÂàÜÊûêÁµêÊûú„Çí‰∏ãÈÉ®„Çª„ÇØ„Ç∑„Éß„É≥„Å´Ë°®Á§∫
            displayOverallAnalysis(strength, sixTwo);
        }

        // ÂÖ®‰ΩìÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
        function displayOverallAnalysis(strength, sixTwo) {
            // „Éá„Éê„ÉÉ„Ç∞Áî®„É≠„Ç∞
            console.log('Strength data:', strength);
            console.log('SixTwo data:', sixTwo);
            
            // Âº∑„ÅøÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫
            displayStrengthAnalysis(strength);
            
            // 6W2HÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫
            displaySixTwoAnalysis(sixTwo);
            
            // „Éö„É´„ÇΩ„Éä„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíË°®Á§∫Ôºà„Å™„Åú„Å™„ÅúÂàÜÊûê„ÅÆÂâç„Å´ÈÖçÁΩÆÔºâ
            displayPersonaFeedback(strength);
            
            // ÂÖ®‰ΩìÂàÜÊûêÁµêÊûú„Çª„ÇØ„Ç∑„Éß„É≥„ÇíË°®Á§∫
            document.getElementById('analysisResultsSection').classList.remove('hidden');
        }

        // Âº∑„ÅøÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫
        function displayStrengthAnalysis(strength) {
            const container = document.getElementById('strengthAnalysisResult');
            let html = '';
            
            if (strength.missing_elements && strength.missing_elements.length > 0) {
                html += '<div class="mb-4"><h4 class="font-semibold text-blue-700 mb-2">‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãË¶ÅÁ¥†:</h4><ul class="space-y-2">';
                strength.missing_elements.forEach(element => {
                    const elementName = typeof element === 'object' ? element.element : element;
                    const suggestion = typeof element === 'object' ? element.suggestion : '';
                    html += `
                        <li class="bg-white rounded-lg p-3 border-l-4 border-blue-400">
                            <div class="font-medium text-blue-800">${elementName}</div>
                            ${suggestion ? `<div class="text-sm text-gray-600 mt-1">${suggestion}</div>` : ''}
                        </li>
                    `;
                });
                html += '</ul></div>';
            }
            
            if (strength.strengths && strength.strengths.length > 0) {
                html += '<div class="mb-4"><h4 class="font-semibold text-blue-700 mb-2">Êó¢Â≠ò„ÅÆÂº∑„Åø:</h4><div class="space-y-3">';
                strength.strengths.forEach(strengthItem => {
                    if (typeof strengthItem === 'object') {
                        // „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà„ÅØË©≥Á¥∞ÊÉÖÂ†±„ÇíÁ∂∫È∫ó„Å´Ë°®Á§∫
                        const content = strengthItem.content || strengthItem.name || strengthItem.element || '';
                        const category = strengthItem.category || '';
                        const impact = strengthItem.impact_score || '';
                        const position = strengthItem.position || '';
                        
                        // „Ç§„É≥„Éë„ÇØ„Éà„Çπ„Ç≥„Ç¢„Å´Âøú„Åò„Å¶Ëâ≤„ÇíÊ±∫ÂÆö
                        let impactColors = {
                            badge: 'bg-gray-100 text-gray-700',
                            border: 'border-gray-400',
                            text: 'text-gray-800'
                        };
                        
                        if (impact === 'È´ò' || impact === 'high') {
                            impactColors = {
                                badge: 'bg-red-100 text-red-700',
                                border: 'border-red-400',
                                text: 'text-red-800'
                            };
                        } else if (impact === '‰∏≠' || impact === 'medium') {
                            impactColors = {
                                badge: 'bg-yellow-100 text-yellow-700',
                                border: 'border-yellow-400',
                                text: 'text-yellow-800'
                            };
                        } else if (impact === '‰Ωé' || impact === 'low') {
                            impactColors = {
                                badge: 'bg-green-100 text-green-700',
                                border: 'border-green-400',
                                text: 'text-green-800'
                            };
                        }
                        
                        html += `
                            <div class="bg-white rounded-lg p-3 border-l-4 ${impactColors.border} shadow-sm">
                                <div class="flex items-start justify-between mb-1">
                                    <span class="text-sm font-medium ${impactColors.text}">‚úì ${content}</span>
                                    ${impact ? `<span class="text-xs px-2 py-1 ${impactColors.badge} rounded-full font-medium">${impact}</span>` : ''}
                                </div>
                                ${category ? `<div class="text-xs text-blue-600 font-medium mb-1">„Ç´„ÉÜ„Ç¥„É™: ${category}</div>` : ''}
                                ${position ? `<div class="text-xs text-gray-500">‰ΩçÁΩÆ: ${position}</div>` : ''}
                            </div>
                        `;
                    } else {
                        // ÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà„ÅØ„Ç∑„É≥„Éó„É´Ë°®Á§∫
                        html += `<div class="text-sm text-green-600 bg-green-50 rounded p-2">‚úì ${strengthItem}</div>`;
                    }
                });
                html += '</div></div>';
            }
            
            
            container.innerHTML = html || '<p class="text-gray-500">ÂàÜÊûê„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô</p>';
        }

        // „Éö„É´„ÇΩ„Éä„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíË°®Á§∫
        function displayPersonaFeedback(strength) {
            // Êó¢Â≠ò„ÅÆ„Éö„É´„ÇΩ„Éä„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÂâäÈô§
            const existingSection = document.getElementById('personaFeedbackSection');
            if (existingSection) {
                existingSection.remove();
            }

            if (strength && strength.persona_feedback && strength.persona_feedback.trim()) {
                const analysisSection = document.getElementById('analysisResultsSection');
                
                // „Éö„É´„ÇΩ„Éä„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Çª„ÇØ„Ç∑„Éß„É≥„Çí‰ΩúÊàê
                const personaSection = document.createElement('div');
                personaSection.id = 'personaFeedbackSection';
                personaSection.className = 'mt-6 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-6';
                
                personaSection.innerHTML = `
                    <h3 class="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                        <span class="w-6 h-6 bg-purple-200 rounded-full flex items-center justify-center text-purple-700 mr-2">üë§</span>
                        Ë™≠ËÄÖ„ÅÆË¶ñÁÇπ
                    </h3>
                    <div class="bg-white rounded-lg p-4 border-l-4 border-purple-400">
                        <div class="text-gray-700 leading-relaxed text-lg italic">
                            "${strength.persona_feedback}"
                        </div>
                        <div class="text-sm text-purple-600 mt-3 font-medium">
                            ‚Äª „Çø„Éº„Ç≤„ÉÉ„Éà„Éö„É´„ÇΩ„Éä„ÅÆË¶ñÁÇπ„Åã„Çâ„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
                        </div>
                    </div>
                `;

                // „Å™„Åú„Å™„ÅúÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆÂâç„Å´ÊåøÂÖ•
                const whySection = document.getElementById('whyAnalysisResultsSection');
                if (whySection) {
                    analysisSection.insertBefore(personaSection, whySection);
                } else {
                    // „Å™„Åú„Å™„ÅúÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÊúÄÂæå„Å´ËøΩÂä†
                    analysisSection.appendChild(personaSection);
                }
                
                console.log('Persona feedback displayed');
            }
        }

        // 6W2HÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫
        function displaySixTwoAnalysis(sixTwo) {
            const container = document.getElementById('sixTwoAnalysisResult');
            
            if (sixTwo.review) {
                // MarkdownÈ¢®„ÅÆ„É¨„Éì„É•„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíHTML„Å´Â§âÊèõ
                const reviewHtml = sixTwo.review
                    .replace(/\*\*(.+?)\*\*/g, '<strong class="font-semibold">$1</strong>')
                    .replace(/‚úÖ/g, '<span class="text-green-600">‚úÖ</span>')
                    .replace(/‚ùå/g, '<span class="text-red-600">‚ùå</span>')
                    .replace(/‚ö†Ô∏è/g, '<span class="text-yellow-600">‚ö†Ô∏è</span>')
                    .replace(/üí°/g, '<span class="text-blue-600">üí°</span>')
                    .replace(/‚≠ê/g, '<span class="text-yellow-500">‚≠ê</span>')
                    .replace(/\n\n/g, '</p><p class="mb-3">')
                    .replace(/\n/g, '<br>');
                
                container.innerHTML = `<div class="prose prose-sm max-w-none"><p class="mb-3">${reviewHtml}</p></div>`;
            } else {
                container.innerHTML = '<p class="text-gray-500">ÂàÜÊûê„Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô</p>';
            }
        }

        // „Å™„Åú„Å™„ÅúÂàÜÊûê„ÇíÈñãÂßãÔºàÂà•„Éö„Éº„Ç∏„Å´ÈÅ∑ÁßªÔºâ
        function startWhyAnalysis() {
            const currentText = document.getElementById('editTextarea').value || currentMarkdown;
            
            if (!currentText.trim()) {
                showToast('ÂàÜÊûê„Åô„ÇãË®ò‰∫ã„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'error');
                return;
            }

            // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´ÁèæÂú®„ÅÆË®ò‰∫ãÂÜÖÂÆπ„Å®ÂàÜÊûêÁµêÊûú„Çí‰øùÂ≠ò
            localStorage.setItem('whyAnalysisArticle', currentText);
            localStorage.setItem('whyAnalysisFrom', 'comment-review');
            
            // ÁèæÂú®„ÅÆÂàÜÊûêÁµêÊûú„ÇÇ‰øùÂ≠òÔºàÊàª„Å£„Å¶„Åç„ÅüÊôÇ„Å´Âæ©ÂÖÉ„Åô„Çã„Åü„ÇÅÔºâ
            if (analysisResults) {
                localStorage.setItem('commentReviewAnalysisResults', JSON.stringify(analysisResults));
            }
            
            // ÁèæÂú®„ÅÆ„Ç≥„É°„É≥„Éà„ÇÇ‰øùÂ≠ò
            if (currentComments && currentComments.length > 0) {
                localStorage.setItem('commentReviewComments', JSON.stringify(currentComments));
            }
            
            // ÁèæÂú®„ÅÆMarkdown„ÇÇ‰øùÂ≠ò
            localStorage.setItem('commentReviewMarkdown', currentMarkdown || currentText);
            
            // „Å™„Åú„Å™„ÅúÂàÜÊûê„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª
            window.location.href = '/why-analyzer';
        }

        // „Ç≥„É°„É≥„Éà„ÅÆË°®Á§∫
        function displayComments() {
            const container = document.getElementById('commentsContainer');
            const noCommentsMessage = document.getElementById('noCommentsMessage');

            if (currentComments.length === 0) {
                noCommentsMessage.style.display = 'block';
                noCommentsMessage.textContent = 'ÊîπÂñÑÊèêÊ°à„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÁ¥†Êô¥„Çâ„Åó„ÅÑË®ò‰∫ã„Åß„ÅôÔºÅ';
                return;
            }

            noCommentsMessage.style.display = 'none';

            container.innerHTML = currentComments.map(comment => {
                const severityColor = {
                    'high': 'border-red-300 bg-red-50',
                    'medium': 'border-yellow-300 bg-yellow-50', 
                    'low': 'border-blue-300 bg-blue-50'
                }[comment.severity] || 'border-gray-300 bg-gray-50';

                const severityIcon = {
                    'high': 'üî•',
                    'medium': '‚ö†Ô∏è',
                    'low': 'üí°'
                }[comment.severity] || 'üí¨';

                // Ê†°Ê≠£„Ç´„Éº„Éâ„ÅÆÁâπÂà•Ë°®Á§∫
                if (comment.category === 'Ê†°Ê≠£' || comment.category === 'Ê†°Ê≠£„Çµ„Éû„É™„Éº') {
                    const isHigh = comment.severity === 'high';
                    const isSummary = comment.type === 'summary';
                    
                    return `
                        <div class="comment-item ${severityColor} ${isHigh ? 'ring-2 ring-red-200' : ''} ${isSummary ? 'border-l-4 border-purple-500' : ''}" 
                             data-comment-id="${comment.id}" onclick="highlightComment('${comment.id}')">
                            <div class="p-4">
                                <div class="flex items-start justify-between mb-3">
                                    <div class="flex items-center space-x-2">
                                        <span class="text-xl">${comment.title.includes('üìù') ? 'üìù' : comment.title.includes('üî•') ? 'üî•' : comment.title.includes('‚ö†Ô∏è') ? '‚ö†Ô∏è' : 'üí°'}</span>
                                        <span class="text-xs px-3 py-1 bg-white rounded-full text-gray-700 font-medium shadow-sm">
                                            ${comment.category}
                                        </span>
                                        ${isHigh ? '<span class="text-xs px-2 py-1 bg-red-500 text-white rounded-full font-bold">ÈáçË¶Å</span>' : ''}
                                    </div>
                                    ${!isSummary ? `
                                        <div class="flex space-x-2">
                                            <button onclick="event.stopPropagation(); applyProofreadSuggestion('${comment.id}')" 
                                                    class="px-3 py-1 bg-blue-500 text-white text-xs rounded-full hover:bg-blue-600 transition-colors">
                                                ÈÅ©Áî®
                                            </button>
                                            <button onclick="event.stopPropagation(); applyCommentToEditor('${comment.id}')" 
                                                    class="px-3 py-1 bg-green-500 text-white text-xs rounded-full hover:bg-green-600 transition-colors">
                                                Á∑®ÈõÜ„Å∏
                                            </button>
                                        </div>
                                    ` : ''}
                                </div>
                                
                                <h4 class="font-semibold text-gray-800 mb-2 text-sm">
                                    ${comment.title.replace(/[üìùüî•‚ö†Ô∏èüí°]/g, '').trim()}
                                </h4>
                                
                                ${!isSummary && comment.suggestions ? `
                                    <div class="bg-white bg-opacity-80 rounded-lg p-3 mb-3 border border-gray-200">
                                        <div class="space-y-2">
                                            <div class="text-sm">
                                                <span class="text-red-600 font-medium">‰øÆÊ≠£Ââç:</span>
                                                <span class="font-mono text-gray-700 bg-red-50 px-2 py-1 rounded">
                                                    ${comment.suggestions.original}
                                                </span>
                                            </div>
                                            <div class="text-sm">
                                                <span class="text-green-600 font-medium">‰øÆÊ≠£Âæå:</span>
                                                <span class="font-mono text-gray-700 bg-green-50 px-2 py-1 rounded">
                                                    ${comment.suggestions.corrected}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                ` : `
                                    <p class="text-sm text-gray-700 mb-2 leading-relaxed">${comment.content}</p>
                                `}
                                
                                ${comment.detail ? `
                                    <div class="mt-3 p-3 bg-gray-50 rounded-lg border-l-3 border-gray-300">
                                        <p class="text-xs text-gray-600 leading-relaxed">
                                            <span class="font-medium">ÁêÜÁî±:</span> ${comment.detail}
                                        </p>
                                    </div>
                                ` : ''}
                                
                                <div class="mt-3 flex items-center justify-between text-xs">
                                    <span class="text-gray-500">
                                        üìç ${comment.position || '‰øÆÊ≠£ÁÆáÊâÄ'}
                                    </span>
                                    ${comment.suggestions && comment.suggestions.type ? `
                                        <span class="px-2 py-1 bg-gray-100 rounded-full text-gray-600">
                                            ${comment.suggestions.type}
                                        </span>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                // ÈÄöÂ∏∏„ÅÆ„Ç≥„É°„É≥„Éà„Ç´„Éº„ÉâË°®Á§∫
                return `
                    <div class="comment-item ${severityColor}" data-comment-id="${comment.id}" onclick="highlightComment('${comment.id}')">
                        <div class="p-4">
                            <div class="flex items-start justify-between mb-2">
                                <div class="flex items-center space-x-2">
                                    <span class="text-lg">${severityIcon}</span>
                                    <span class="text-xs px-2 py-1 bg-white rounded-full text-gray-600">${comment.category}</span>
                                </div>
                                <div class="flex space-x-2">
                                    <button onclick="applyComment('${comment.id}')" class="text-blue-600 hover:text-blue-800 text-sm">
                                        ÈÅ©Áî®
                                    </button>
                                    <button onclick="applyCommentToEditor('${comment.id}')" class="text-green-600 hover:text-green-800 text-sm">
                                        Á∑®ÈõÜ„Å∏
                                    </button>
                                </div>
                            </div>
                            <h4 class="font-medium text-gray-800 mb-2">${comment.title}</h4>
                            <p class="text-sm text-gray-700 mb-2">${comment.content.substring(0, 150)}${comment.content.length > 150 ? '...' : ''}</p>
                            
                            ${comment.detail ? `
                                <div class="mt-3 p-3 bg-white bg-opacity-70 rounded border-l-2 border-gray-300">
                                    <p class="text-xs text-gray-600">${comment.detail}</p>
                                </div>
                            ` : ''}
                            
                            ${comment.tips ? `
                                <div class="mt-2 text-xs text-gray-500">
                                    üí° <strong>„Ç≥„ÉÑ:</strong> ${comment.tips}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Ë®ò‰∫ãÂÜÖ„Å´„Éè„Ç§„É©„Ç§„Éà„ÇíËøΩÂä†
        function addHighlights() {
            // ÂÆüË£ÖÁ∞°Áï•ÂåñÔºöÂêÑÊÆµËêΩ„Å´ÊΩúÂú®ÁöÑ„Å™ÊîπÂñÑÁÇπ„Å®„Åó„Å¶ËñÑ„ÅÑ„Éè„Ç§„É©„Ç§„Éà„ÇíËøΩÂä†
            const articleContent = document.getElementById('articleContent');
            const paragraphs = articleContent.querySelectorAll('p, h1, h2, h3');
            
            paragraphs.forEach((paragraph, index) => {
                if (index < currentComments.length) {
                    const comment = currentComments[index];
                    paragraph.classList.add('comment-highlight');
                    paragraph.setAttribute('data-comment-id', comment.id);
                    paragraph.addEventListener('click', () => highlightComment(comment.id));
                }
            });
        }

        // „Ç≥„É°„É≥„Éà„ÅÆ„Éè„Ç§„É©„Ç§„Éà
        function highlightComment(commentId) {
            // ÂÖ®„Å¶„ÅÆ„Éè„Ç§„É©„Ç§„Éà„Çí„É™„Çª„ÉÉ„Éà
            document.querySelectorAll('.comment-highlight').forEach(el => {
                el.classList.remove('active');
            });
            document.querySelectorAll('.comment-item').forEach(el => {
                el.classList.remove('highlighted');
            });

            // ÈÅ∏Êäû„Åï„Çå„Åü„Ç≥„É°„É≥„Éà„Çí„Éè„Ç§„É©„Ç§„Éà
            const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
            const commentItem = document.querySelector(`.comment-item[data-comment-id="${commentId}"]`);
            
            if (commentElement) {
                commentElement.classList.add('active');
                commentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
            
            if (commentItem) {
                commentItem.classList.add('highlighted');
                commentItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // Ê†°Ê≠£ÊèêÊ°à„ÅÆÈÅ©Áî®
        function applyProofreadSuggestion(commentId) {
            const comment = currentComments.find(c => c.id === commentId);
            if (!comment || !comment.suggestions) return;
            
            const { original, corrected } = comment.suggestions;
            
            // Á∑®ÈõÜ„Ç®„É™„Ç¢„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊõ¥Êñ∞
            const textarea = document.getElementById('editTextarea');
            let currentText = textarea.value;
            
            // ÂÖÉ„ÅÆÊñáÁ´†„Çí‰øÆÊ≠£Âæå„ÅÆÊñáÁ´†„Å´ÁΩÆÊèõ
            if (currentText.includes(original)) {
                const updatedText = currentText.replace(original, corrected);
                textarea.value = updatedText;
                updateEditCharCount();
                
                // „Éó„É¨„Éì„É•„Éº„ÇÇÊõ¥Êñ∞
                const articleContent = document.getElementById('articleContent');
                if (articleContent.innerHTML.includes(original)) {
                    articleContent.innerHTML = articleContent.innerHTML.replace(original, corrected);
                }
                
                // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
                showToast(`Ê†°Ê≠£„ÇíÈÅ©Áî®„Åó„Åæ„Åó„Åü: ${comment.suggestions.type}`, 'success');
                
                // „Ç≥„É°„É≥„Éà„ÇíÈÅ©Áî®Ê∏à„Åø„Å®„Åó„Å¶„Éû„Éº„ÇØ
                const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
                if (commentElement) {
                    commentElement.style.opacity = '0.6';
                    commentElement.style.pointerEvents = 'none';
                    
                    // ÈÅ©Áî®Ê∏à„Åø„É©„Éô„É´„ÇíËøΩÂä†
                    const appliedLabel = document.createElement('div');
                    appliedLabel.className = 'absolute top-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full';
                    appliedLabel.textContent = 'ÈÅ©Áî®Ê∏à„Åø';
                    commentElement.style.position = 'relative';
                    commentElement.appendChild(appliedLabel);
                }
            } else {
                showToast('‰øÆÊ≠£ÂØæË±°„ÅÆÊñáÁ´†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü', 'error');
            }
        }

        // „Ç≥„É°„É≥„Éà„ÅÆÈÅ©Áî®
        function applyComment(commentId) {
            const comment = currentComments.find(c => c.id === commentId);
            if (!comment) return;

            // Ê†°Ê≠£ÊèêÊ°à„ÅÆÂ†¥Âêà„ÅØÂ∞ÇÁî®„ÅÆÂá¶ÁêÜ„Çí‰ΩøÁî®
            if (comment.category === 'Ê†°Ê≠£' && comment.suggestions) {
                applyProofreadSuggestion(commentId);
                return;
            }

            // ÈÄöÂ∏∏„ÅÆ„Ç≥„É°„É≥„ÉàÈÅ©Áî®Âá¶ÁêÜ
            alert(`ÊîπÂñÑÊèêÊ°à„ÇíÈÅ©Áî®„Åó„Åæ„Åó„Åü:\n\n${comment.title}\n\n${comment.content}`);
            
            // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅË®ò‰∫ãÂÜÖÂÆπ„ÇíÁõ¥Êé•Á∑®ÈõÜ„Åô„ÇãÊ©üËÉΩ„ÇíËøΩÂä†„Åß„Åç„Åæ„Åô
        }

        // „Ç≥„É°„É≥„Éà„ÇíÁ∑®ÈõÜ„Ç®„É™„Ç¢„Å´ÈÅ©Áî®
        function applyCommentToEditor(commentId) {
            const comment = currentComments.find(c => c.id === commentId);
            if (!comment) return;

            // Á∑®ÈõÜ„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà
            if (!isEditMode) {
                switchToEditMode();
            }

            // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Å´ÊîπÂñÑÊèêÊ°à„ÇíËøΩÂä†
            const textarea = document.getElementById('editTextarea');
            const currentText = textarea.value;
            
            // ÊîπÂñÑÊèêÊ°à„Çí„Ç≥„É°„É≥„ÉàÂΩ¢Âºè„ÅßËøΩÂä†
            const improvement = `\n\n<!-- ${comment.title} -->\n<!-- ${comment.content} -->\n<!-- „Ç´„ÉÜ„Ç¥„É™: ${comment.category} -->\n`;
            
            textarea.value = currentText + improvement;
            textarea.scrollTop = textarea.scrollHeight;
            updateEditCharCount();
            
            // „Éï„Ç©„Éº„Ç´„Çπ
            textarea.focus();
            
            // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
            showToast('ÊîπÂñÑÊèêÊ°à„ÇíÁ∑®ÈõÜ„Ç®„É™„Ç¢„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü', 'success');
        }

        // „Éó„É¨„Éì„É•„Éº„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà
        function switchToPreviewMode() {
            const previewTab = document.getElementById('previewTab');
            const editTab = document.getElementById('editTab');
            const articleContent = document.getElementById('articleContent');
            const editMode = document.getElementById('editMode');
            
            isEditMode = false;
            
            // „Çø„Éñ„ÅÆÂ§ñË¶≥„ÇíÊõ¥Êñ∞
            previewTab.className = 'px-4 py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 bg-white transition-colors';
            editTab.className = 'px-4 py-3 text-sm font-medium text-gray-500 border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 transition-colors';
            
            // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà
            articleContent.classList.remove('hidden');
            editMode.classList.add('hidden');
            
            // „Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
            previewChanges();
        }

        // Á∑®ÈõÜ„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà
        function switchToEditMode() {
            const previewTab = document.getElementById('previewTab');
            const editTab = document.getElementById('editTab');
            const articleContent = document.getElementById('articleContent');
            const editMode = document.getElementById('editMode');
            
            isEditMode = true;
            
            // „Çø„Éñ„ÅÆÂ§ñË¶≥„ÇíÊõ¥Êñ∞
            editTab.className = 'px-4 py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 bg-white transition-colors';
            previewTab.className = 'px-4 py-3 text-sm font-medium text-gray-500 border-b-2 border-transparent hover:text-gray-700 hover:border-gray-300 transition-colors';
            
            // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà
            articleContent.classList.add('hidden');
            editMode.classList.remove('hidden');
            
            // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Å´„Éï„Ç©„Éº„Ç´„Çπ
            document.getElementById('editTextarea').focus();
        }

        // ÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ„ÅÆÈñ¢Êï∞ÔºàÊó¢Â≠ò„ÅÆ„Ç≥„Éº„Éâ„Åß‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
        function toggleEditMode() {
            if (isEditMode) {
                switchToPreviewMode();
            } else {
                switchToEditMode();
            }
        }

        // „Éó„É¨„Éì„É•„ÉºÊõ¥Êñ∞
        function previewChanges() {
            const textarea = document.getElementById('editTextarea');
            const newContent = textarea.value;
            
            if (newContent !== originalContent) {
                displayArticleWithComments(newContent);
                showToast('„Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
            }
        }

        // Â§âÊõ¥„Çí‰øùÂ≠ò
        function saveChanges() {
            const textarea = document.getElementById('editTextarea');
            originalContent = textarea.value;
            analysisResults.content = originalContent;
            
            // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
            saveAnalysisResults();
            
            previewChanges();
            showToast('Â§âÊõ¥„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success');
        }

        // ÂÜçÂàÜÊûê
        async function reAnalyze() {
            const textarea = document.getElementById('editTextarea');
            const newContent = textarea.value.trim();
            
            if (!newContent) {
                alert('ÂàÜÊûê„Åô„ÇãÂÜÖÂÆπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
                return;
            }

            // ‰øùÂ≠ò„Åó„Å¶„Åã„ÇâÂÜçÂàÜÊûê
            saveChanges();
            
            showLoading();
            updateLoadingProgress(10, 'ÂÜçÂàÜÊûê„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            try {
                const [strengthResult, whyResult, sixTwoResult, proofreadResult] = await Promise.all([
                    executeStrengthAnalysis(newContent, '', ''),
                    executeWhyAnalysis(newContent),
                    executeSixTwoReview(newContent),
                    executeProofreadAnalysis(newContent)
                ]);
                
                updateLoadingProgress(90, 'Êñ∞„Åó„ÅÑÂàÜÊûêÁµêÊûú„ÇíÂá¶ÁêÜ‰∏≠...');
                
                analysisResults = {
                    strength: strengthResult,
                    why: whyResult,
                    sixTwo: sixTwoResult,
                    proofread: proofreadResult,
                    content: newContent
                };
                
                generateComments();
                
                // ÂÜçÂàÜÊûêÁµêÊûú„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
                saveAnalysisResults();
                
                updateLoadingProgress(100, 'ÂÆå‰∫ÜÔºÅ');
                
                setTimeout(() => {
                    hideLoading();
                    showToast('ÂÜçÂàÜÊûê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
                }, 500);
                
            } catch (error) {
                console.error('Re-analysis failed:', error);
                hideLoading();
                showToast('ÂÜçÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', 'error');
            }
        }

        // Á∑®ÈõÜ„Ç®„É™„Ç¢„ÅÆÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Éà
        function updateEditCharCount() {
            const textarea = document.getElementById('editTextarea');
            const charCountEl = document.getElementById('editCharCount');
            if (textarea && charCountEl) {
                charCountEl.textContent = textarea.value.length.toLocaleString() + ' ÊñáÂ≠ó';
            }
        }

        // „Éà„Éº„Çπ„ÉàÈÄöÁü•
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 p-4 rounded-lg text-white z-50 animate-in slide-in-from-top ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' : 'bg-blue-500'
            }`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.add('animate-out', 'slide-out-to-top');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // UIÂà∂Âæ°Èñ¢Êï∞
        function showLoading() {
            document.getElementById('loadingOverlay').classList.remove('hidden');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.add('hidden');
        }

        function updateLoadingProgress(percent, message) {
            document.getElementById('loadingProgress').style.width = percent + '%';
            document.getElementById('loadingMessage').textContent = message;
        }

        function showReviewContainer() {
            document.getElementById('inputContainer').classList.add('hidden');
            document.getElementById('reviewContainer').classList.remove('hidden');
        }

        function showNewArticleModal() {
            document.getElementById('newArticleModal').classList.remove('hidden');
        }

        function hideNewArticleModal() {
            document.getElementById('newArticleModal').classList.add('hidden');
            document.getElementById('newArticleForm').reset();
        }

        function updateCommentCount() {
            document.getElementById('commentCount').textContent = `„Ç≥„É°„É≥„Éà: ${currentComments.length}`;
        }

        function analyzeNewArticle(event) {
            event.preventDefault();
            const content = document.getElementById('newArticleInput').value.trim();
            if (!content) return;
            
            // „Éï„Ç©„Éº„É†„Å´„Éá„Éº„Çø„ÇíË®≠ÂÆö„Åó„Å¶Êó¢Â≠ò„ÅÆÂàÜÊûêÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó
            document.getElementById('articleInput').value = content;
            document.getElementById('targetPersona').value = '';
            document.getElementById('releaseType').value = '';
            
            hideNewArticleModal();
            analyzeArticle(event);
        }

        function exportComments() {
            if (currentComments.length === 0) {
                alert('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åô„Çã„Ç≥„É°„É≥„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
                return;
            }

            const exportData = {
                article: analysisResults.content,
                comments: currentComments,
                timestamp: new Date().toISOString(),
                total_comments: currentComments.length
            };

            const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `article_review_${new Date().toISOString().slice(0, 10)}.json`;
            a.click();
            URL.revokeObjectURL(url);
        }

        // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÇíÂÖ®„Å¶„ÇØ„É™„Ç¢„Åô„Çã
        function clearAllLocalStorage() {
            if (confirm('ÂÖ®„Å¶„ÅÆ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü\n\nÂâäÈô§„Åï„Çå„Çã„Éá„Éº„Çø:\n- ÂàÜÊûêÁµêÊûú\n- „Ç≥„É°„É≥„Éà„Éá„Éº„Çø\n- „Å™„Åú„Å™„ÅúÂàÜÊûêÁµêÊûú\n- „Åù„ÅÆ‰ªñ„ÅÆ‰øùÂ≠ò„Éá„Éº„Çø\n\n„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
                try {
                    // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅÆÂÜÖÂÆπ„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Âá∫ÂäõÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
                    console.log('Clearing localStorage. Current contents:');
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        console.log(`${key}:`, localStorage.getItem(key));
                    }
                    
                    // ÂÖ®„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
                    localStorage.clear();
                    
                    console.log('LocalStorage cleared successfully');
                    showToast('„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅÆ„Éá„Éº„Çø„ÇíÂÖ®„Å¶ÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
                    
                    // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    
                } catch (error) {
                    console.error('Error clearing localStorage:', error);
                    showToast('„Éá„Éº„Çø„ÇØ„É™„Ç¢‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', 'error');
                }
            }
        }

        // „É¢„Éº„ÉÄ„É´Â§ñ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
        document.getElementById('newArticleModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideNewArticleModal();
            }
        });

        // „Å™„Åú„Å™„ÅúÂàÜÊûê„Åã„ÇâÊàª„Å£„Å¶„Åç„ÅüÂ†¥Âêà„ÅÆÂæ©ÂÖÉÂá¶ÁêÜ
        function restoreFromWhyAnalysis() {
            // „Å™„Åú„Å™„ÅúÂàÜÊûê„Åã„ÇâÊàª„Å£„Å¶„Åç„ÅüÂ†¥Âêà„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            const urlParams = new URLSearchParams(window.location.search);
            const fromWhy = urlParams.get('from') === 'why-analysis';
            
            if (fromWhy || localStorage.getItem('commentReviewAnalysisResults')) {
                try {
                    // ‰øùÂ≠ò„Åï„Çå„ÅüÂàÜÊûêÁµêÊûú„ÇíÂæ©ÂÖÉ
                    const savedResults = localStorage.getItem('commentReviewAnalysisResults');
                    const savedComments = localStorage.getItem('commentReviewComments');
                    const savedMarkdown = localStorage.getItem('commentReviewMarkdown');
                    
                    if (savedResults) {
                        analysisResults = JSON.parse(savedResults);
                        
                        if (savedComments) {
                            currentComments = JSON.parse(savedComments);
                        }
                        
                        if (savedMarkdown) {
                            currentMarkdown = savedMarkdown;
                            originalContent = savedMarkdown;
                            
                            // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Å´Âæ©ÂÖÉ
                            const textarea = document.getElementById('editTextarea');
                            if (textarea) {
                                textarea.value = savedMarkdown;
                                updateEditCharCount();
                            }
                        }
                        
                        // UI„ÇíÂæ©ÂÖÉ
                        showReviewContainer();
                        displayArticleWithComments(currentMarkdown);
                        displayComments();
                        displayOverallAnalysis(analysisResults.strength, analysisResults.sixTwo);
                        updateCommentCount();
                        
                        // „Å™„Åú„Å™„ÅúÂàÜÊûê„ÅßÊñ∞„Åó„ÅÑÁµêÊûú„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                        const whyResults = localStorage.getItem('whyAnalysisResults');
                        console.log('Raw whyResults from localStorage:', whyResults);
                        if (whyResults) {
                            try {
                                const whyData = JSON.parse(whyResults);
                                console.log('Parsed whyData:', whyData);
                                
                                // ÊúÄÁµÇÊ¥ûÂØü„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„ÅøÊõ¥Êñ∞ÔºàÂè§„ÅÑ„Éá„Éº„Çø„Åß‰∏äÊõ∏„Åç„Åó„Å™„ÅÑÔºâ
                                if (whyData.analysis_complete && whyData.insights && whyData.insights.trim()) {
                                    console.log('Complete why analysis found - updating results');
                                    analysisResults.why = whyData;
                                    
                                    // „Å™„Åú„Å™„ÅúÂàÜÊûê„ÅÆÁµêÊûú„ÇíUI‰∏ãÈÉ®„Å´Ë°®Á§∫
                                    displayWhyAnalysisResults(whyData);
                                    
                                    // Êõ¥Êñ∞„Åï„Çå„ÅüÂàÜÊûêÁµêÊûú„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
                                    saveAnalysisResults();
                                    
                                    // ‰ΩøÁî®Ê∏à„Åø„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
                                    localStorage.removeItem('whyAnalysisResults');
                                    console.log('Complete why analysis results displayed and localStorage cleared');
                                } else {
                                    console.log('Incomplete why analysis found - keeping existing data');
                                    // ÈÄ≤Ë°å‰∏≠„ÅÆ„Éá„Éº„Çø„ÇíUI‰∏ãÈÉ®„Å´Ë°®Á§∫Ôºà‰∏äÊõ∏„Åç„ÅØ„Åó„Å™„ÅÑÔºâ
                                    displayWhyAnalysisResults(whyData);
                                }
                            } catch (e) {
                                console.error('Error parsing why analysis results:', e);
                            }
                        } else {
                            console.log('No whyAnalysisResults found in localStorage');
                            
                            // „Éá„Éê„ÉÉ„Ç∞: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅÆÂÖ®ÂÜÖÂÆπ„ÇíË°®Á§∫
                            console.log('All localStorage items:');
                            for (let i = 0; i < localStorage.length; i++) {
                                const key = localStorage.key(i);
                                console.log(key + ': ', localStorage.getItem(key));
                            }
                        }
                        
                        showToast('„Å™„Åú„Å™„ÅúÂàÜÊûê„Åã„ÇâÊàª„Çä„Åæ„Åó„Åü', 'success');
                        
                        // URL„Éë„É©„É°„Éº„Çø„Çí„ÇØ„É™„Ç¢
                        if (fromWhy) {
                            window.history.replaceState({}, document.title, window.location.pathname);
                        }
                    }
                } catch (error) {
                    console.error('Error restoring from why analysis:', error);
                    showToast('Âæ©ÂÖÉ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü', 'error');
                }
            }
        }

        // „Å™„Åú„Å™„ÅúÂàÜÊûêÁµêÊûú„ÅÆË°®Á§∫
        function displayWhyAnalysisResults(whyData) {
            console.log('displayWhyAnalysisResults called with:', whyData);
            
            const existingSection = document.getElementById('whyAnalysisResultsSection');
            if (existingSection) {
                existingSection.remove();
                console.log('Removed existing why analysis section');
            }
            
            const analysisSection = document.getElementById('analysisResultsSection');
            console.log('Analysis section found:', !!analysisSection);
            
            if (analysisSection && whyData) {
                const whySection = document.createElement('div');
                whySection.id = 'whyAnalysisResultsSection';
                whySection.className = 'mt-6 bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-6';
                
                let whyHtml = `
                    <h3 class="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                        <span class="w-6 h-6 bg-purple-200 rounded-full flex items-center justify-center text-purple-700 mr-2">ü§î</span>
                        „Å™„Åú„Å™„ÅúÂàÜÊûêÁµêÊûú
                    </h3>
                `;
                
                // ÊúÄÁµÇÊ¥ûÂØü„ÅÆÂÖ®„Éá„Éº„Çø„ÇíÊßãÈÄ†Âåñ„Åó„Å¶Ë°®Á§∫
                if (whyData.insights && whyData.insights.trim()) {
                    whyHtml += `<div class="bg-white rounded-lg p-4 mb-4">
                        <h4 class="font-semibold text-purple-700 mb-2 flex items-center">
                            <span class="mr-2">üéØ</span>ÊúÄÁµÇÊ¥ûÂØü„Å®„Çπ„Éà„Éº„É™„Éº
                        </h4>
                        <div class="prose max-w-none text-gray-700 leading-relaxed whitespace-pre-line">${whyData.insights}</div>
                    </div>`;
                    
                } else if (whyData.chat_history && whyData.chat_history.length > 0) {
                    // Ê¥ûÂØü„Åå„Åæ„Å†ÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
                    whyHtml += `<div class="bg-white rounded-lg p-4 mb-4">
                        <h4 class="font-semibold text-purple-700 mb-2 flex items-center">
                            <span class="mr-2">üí°</span>Ê¥ûÂØü„ÉªÊ∞ó„Å•„Åç
                        </h4>
                        <div class="p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-300">
                            <p class="text-gray-700">„Å™„Åú„Å™„ÅúÂàÜÊûê„ÅØÈñãÂßã„Åï„Çå„Åæ„Åó„Åü„Åå„ÄÅÊúÄÁµÇÁöÑ„Å™Ê¥ûÂØü„ÅØ„Åæ„Å†ÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ</p>
                            <p class="text-sm text-gray-600 mt-1">ÂàÜÊûê„ÇíÁ∂öË°å„Åó„Å¶„ÄåÊúÄÁµÇÊ¥ûÂØü„ÇíÁîüÊàê„Äç„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„ÄÅ„Åì„Åì„Å´Ë©≥Á¥∞„Å™Ê¥ûÂØü„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ</p>
                        </div>
                    </div>`;
                }
                
                
                // „ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„ÅÆË¶ÅÁ¥ÑË°®Á§∫
                if (whyData.chat_history && whyData.chat_history.length > 0) {
                    whyHtml += `<div class="bg-white rounded-lg p-4">
                        <h4 class="font-semibold text-purple-700 mb-2 flex items-center">
                            <span class="mr-2">üí¨</span>ÂàÜÊûêÂØæË©±Â±•Ê≠¥
                            <button onclick="toggleChatHistory()" class="ml-2 text-xs px-2 py-1 bg-purple-100 text-purple-600 rounded hover:bg-purple-200" id="chatToggleBtn">
                                Ë°®Á§∫
                            </button>
                        </h4>
                        <div id="chatHistoryContent" class="hidden mt-3 max-h-64 overflow-y-auto space-y-2">`;
                    whyData.chat_history.forEach((message, index) => {
                        const isBot = message.role === 'assistant';
                        whyHtml += `<div class="p-2 rounded ${isBot ? 'bg-purple-100 text-purple-800' : 'bg-gray-100 text-gray-800'}">
                            <div class="text-xs font-medium mb-1">${isBot ? 'Bot' : 'You'}</div>
                            <div class="text-sm">${message.content}</div>
                        </div>`;
                    });
                    whyHtml += `</div></div>`;
                }
                
                whySection.innerHTML = whyHtml;
                console.log('Generated whyHtml length:', whyHtml.length);
                console.log('whySection.innerHTML set successfully');
                
                analysisSection.appendChild(whySection);
                console.log('whySection appended to analysisSection');
                console.log('Final whySection HTML:', whySection.outerHTML.substring(0, 500) + '...');
                
                // DOMÁ¢∫Ë™ç„ÅÆ„Éá„Éê„ÉÉ„Ç∞
                setTimeout(() => {
                    const domCheck = document.getElementById('whyAnalysisResultsSection');
                    console.log('DOM check - whyAnalysisResultsSection exists:', !!domCheck);
                    if (domCheck) {
                        console.log('Element is visible:', domCheck.offsetWidth > 0 && domCheck.offsetHeight > 0);
                        console.log('Element position:', domCheck.getBoundingClientRect());
                        console.log('Element styles:', getComputedStyle(domCheck).display, getComputedStyle(domCheck).visibility);
                        console.log('Parent element:', domCheck.parentElement?.id);
                        console.log('Children count:', domCheck.children.length);
                    }
                    
                    // Ë®ò‰∫ãÊ¥ªÁî®ÊñπÊ≥ï„ÅÆË¶ÅÁ¥†„ÇÇÁ¢∫Ë™ç
                    const methodElements = document.querySelectorAll('[class*="bg-purple-50"]');
                    console.log('Method elements found:', methodElements.length);
                    methodElements.forEach((el, i) => {
                        console.log(`Method element ${i}:`, el.textContent?.substring(0, 50));
                    });
                }, 100);
            }
        }

        // „ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„Åã„ÇâË®ò‰∫ãÊ¥ªÁî®ÊñπÊ≥ï„ÇíÊäΩÂá∫
        function extractArticleApplications(chatHistory) {
            console.log('Extracting applications from chat history:', chatHistory);
            const applications = [];
            
            chatHistory.forEach((message, index) => {
                // „Å™„Åú„Å™„ÅúÂàÜÊûê„Åß„ÅØ message.type === 'bot_question' „Åæ„Åü„ÅØ message.role === 'assistant'
                const isBot = (message.role === 'assistant') || (message.type === 'bot_question');
                const content = message.content;
                
                if (isBot && content) {
                    console.log(`Processing bot message ${index}:`, content);
                    
                    // „Çà„ÇäÂπÖÂ∫É„ÅÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅßÊ§úÁ¥¢
                    const keywords = ['Ê¥ªÁî®', 'ÂøúÁî®', 'Â±ïÈñã', 'ÂäπÊûúÁöÑ', '‰Ωø„Åà„Çã', 'ÊúâÂäπ', 'Âèñ„ÇäÁµÑ„Åø', 'ÊñΩÁ≠ñ', 'Êà¶Áï•', 'PR', '„Éó„É¨„Çπ„É™„É™„Éº„Çπ', 'Ë®ò‰∫ã', 'ÊÉÖÂ†±Áô∫‰ø°', '„Éè„ÉÉ„Ç´„ÇΩ„É≥', 'Êé°Áî®', '‰∫∫Êùê', '‰ºÅÊ•≠', 'ÊñπÊ≥ï', 'ÁêÜÁî±', '„Åü„ÇÅ'];
                    const hasKeyword = keywords.some(keyword => content.includes(keyword));
                    
                    console.log(`Message has keyword: ${hasKeyword}`);
                    
                    if (hasKeyword || content.length > 20) { // „Åï„Çâ„Å´Á∑©„ÅÑÊù°‰ª∂
                        // „Éú„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁõ¥Êé•Ê¥ªÁî®ÊñπÊ≥ï„Å®„Åó„Å¶‰ΩøÁî®Ôºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
                        if (content.length > 20) {
                            applications.push({
                                title: content.length > 50 ? content.substring(0, 50) + '...' : content,
                                content: content,
                                source: 'direct_bot_message'
                            });
                        }
                        
                        // ÊñáÁ´†„ÇíÊßò„ÄÖ„Å™Âå∫Âàá„ÇäÊñáÂ≠ó„ÅßÂàÜÂâ≤
                        const sentences = content.split(/[„ÄÇÔºÅÔºü\n„Éª]/).filter(s => s.trim().length > 5);
                        console.log('Found sentences:', sentences);
                        
                        sentences.forEach(sentence => {
                            const trimmed = sentence.trim();
                            if (trimmed.length > 10) {
                                // „Çà„ÇäÁ∑©„ÅÑÊù°‰ª∂„ÅßÊ¥ªÁî®ÊñπÊ≥ï„ÇíÊäΩÂá∫
                                const isApplication = keywords.some(keyword => trimmed.includes(keyword)) ||
                                                    trimmed.includes('„Åì„Å®') ||
                                                    trimmed.includes('ÊñπÊ≥ï') ||
                                                    trimmed.includes('ÊâãÊ≥ï') ||
                                                    trimmed.includes('„Ç¢„Éó„É≠„Éº„ÉÅ') ||
                                                    trimmed.includes('„Åü„ÇÅ') ||
                                                    trimmed.includes('„Åã„Çâ') ||
                                                    trimmed.includes('„Å´„Çà„Å£„Å¶') ||
                                                    trimmed.includes('Ôºü') ||
                                                    trimmed.includes('„Åß„Åô');
                                
                                if (isApplication) {
                                    applications.push({
                                        title: trimmed.length > 40 ? trimmed.substring(0, 40) + '...' : trimmed,
                                        content: trimmed,
                                        source: 'sentence_extraction'
                                    });
                                }
                            }
                        });
                    }
                }
            });
            
            console.log('Extracted applications (before filtering):', applications);
            console.log('Total applications before filtering:', applications.length);
            
            // ÈáçË§á„ÇíÈô§Âéª
            const uniqueApplications = applications.filter((app, index, self) => 
                index === self.findIndex(a => a.content === app.content)
            );
            console.log('After deduplication:', uniqueApplications.length);
            
            // Áü≠„Åô„Åé„Çã„ÇÇ„ÅÆ„ÇíÈô§Â§ñ„Åó„ÄÅÊúÄÂ§ß5‰ª∂„Åæ„ÅßÔºà„Éá„Éê„ÉÉ„Ç∞Áî®„Å´Á∑©„ÅÑÊù°‰ª∂Ôºâ
            const filteredApplications = uniqueApplications.filter(app => app.content.length > 5);
            console.log('After length filtering (>15 chars):', filteredApplications.length);
            
            const finalApplications = filteredApplications.slice(0, 5);
            console.log('Final applications (max 5):', finalApplications.length);
            console.log('Returning applications:', finalApplications);
            
            return finalApplications;
        }

        // „ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„ÅÆË°®Á§∫Âàá„ÇäÊõø„Åà
        function toggleChatHistory() {
            const content = document.getElementById('chatHistoryContent');
            const btn = document.getElementById('chatToggleBtn');
            
            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                btn.textContent = 'Èö†„Åô';
            } else {
                content.classList.add('hidden');
                btn.textContent = 'Ë°®Á§∫';
            }
        }

        // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´Âæ©ÂÖÉÂá¶ÁêÜ„ÇíÂÆüË°å
        document.addEventListener('DOMContentLoaded', function() {
            restoreFromWhyAnalysis();
        });

        // „É¢„Éº„ÉÄ„É´Â§ñ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
        document.getElementById('newArticleModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideNewArticleModal();
            }
        });
    </script>
</body>
</html>